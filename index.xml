<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Welcome to VMware Aria Graph Examples on vmware-aria-graph-examples</title><link>https://vmware-aria-graph-examples.github.io/</link><description>Recent content in Welcome to VMware Aria Graph Examples on vmware-aria-graph-examples</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://vmware-aria-graph-examples.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Authentication</title><link>https://vmware-aria-graph-examples.github.io/getting-started/authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vmware-aria-graph-examples.github.io/getting-started/authentication/</guid><description>Authentication to the VMware Aria GraphQL API requires a CSP user token that is scoped to an Aria Hub role. See How do I generate API tokens in the VMware Cloud Services documentation.
The authMutation mutation has a method to generate an access token, which is used in subsequent API Queries to authenticate.
1 2 3 4 5 6 7 8 mutation { authMutation { generateAccessToken(userToken: &amp;#34;&amp;lt;API User Token&amp;gt;&amp;#34;) { authorization expirationTime } } } The response to the authMutation method is a JSON payload with the properties requested from the AuthAccessToken type.</description></item><item><title>Query Entities by Type</title><link>https://vmware-aria-graph-examples.github.io/graphql-query-examples/queryentitybytype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vmware-aria-graph-examples.github.io/graphql-query-examples/queryentitybytype/</guid><description>This query takes a single argument entityType to return entities filtered by the entityType. The query requests the entityId and the name and id of any namespaces that entity is part of.
Query 1 2 3 4 5 6 7 8 9 10 11 12 13 query QueryEntityByType($entityType: [String!]) { entityQuery { queryEntities(entityType: $entityType) { entities { entityId namespaces { name id } } } } } Variables 1 2 3 { &amp;#34;entityType&amp;#34;: &amp;#34;AWS.</description></item><item><title>Configuring Altair Client</title><link>https://vmware-aria-graph-examples.github.io/getting-started/configuring-altair-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vmware-aria-graph-examples.github.io/getting-started/configuring-altair-client/</guid><description>This article describes how to configure Altair for multiple environments, and how to run a pre-execution script to authenticate against VMware Aria&amp;rsquo;s GraphQL API if required. Altair can be downloaded as a desktop application, or installed as a browser plugin - these steps work for all versions.
Create an Environment Altair uses Environments to store global variables that can be accessed using the {{variable-name}} syntax. We will use an Environment to store configuration (the Aria User Token and FQDN) as well as programatically storing variables (the authentication header and expiry date).</description></item><item><title>Filtering Entity Queries</title><link>https://vmware-aria-graph-examples.github.io/graphql-query-examples/filtering-entity-queries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vmware-aria-graph-examples.github.io/graphql-query-examples/filtering-entity-queries/</guid><description>When you perform an entityQuery you can filter the response based on the value of fields using the QueryFilter object .
When building the QueryFilter object you provide a field name (which must be a field on the entityType you are looking for) on which to filter. The operator field is an ENUM with the below values that can be used when creating a filter:
EQ equal to NEQ not equal to LT less than LTE less than or equal to GT greater than GTE greater than or equal to CONTAINS case sensitive check for the provided string within the field value STARTSWITH case sensitive check if the field value starts with the provided string ENDSWITH case sensitive check if the field value ends with the provided string ISNULL field is null ISNOTNULL field is not null The value is provided for the comparison operators, except the ISNULL and ISNOTNULL operators.</description></item></channel></rss>