<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Welcome to VMware Aria Graph Examples on vmware-aria-graph-examples</title><link>https://vmware-aria-graph-examples.github.io/</link><description>Recent content in Welcome to VMware Aria Graph Examples on vmware-aria-graph-examples</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://vmware-aria-graph-examples.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuring Altair Client</title><link>https://vmware-aria-graph-examples.github.io/getting-started/configuring-altair-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vmware-aria-graph-examples.github.io/getting-started/configuring-altair-client/</guid><description>Altair can be downloaded as a desktop application, or installed as a browser plugin - these steps work for all versions.
This article describes how to configure Altair for multiple environments, and how to run a pre-execution script to authenticate against VMware Aria&amp;rsquo;s GraphQL API if required.
Create an Environment Altair uses Environments to store global variables that can be accessed using the {{variable-name}} syntax. This allows you to write queries that can be re-used in different environments by incorporating the variables.</description></item><item><title>Query Entities by Type</title><link>https://vmware-aria-graph-examples.github.io/graphql-query-examples/queryentitybytype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vmware-aria-graph-examples.github.io/graphql-query-examples/queryentitybytype/</guid><description>This query takes a single argument entityType to return entities filtered by the entityType. The query requests the entityId and the name and id of any namespaces that entity is part of.
Query 1 2 3 4 5 6 7 8 9 10 11 12 13 query QueryEntityByType($entityType: [String!]) { entityQuery { queryEntities(entityType: $entityType) { entities { entityId namespaces { name id } } } } } Variables 1 2 3 { &amp;#34;entityType&amp;#34;: &amp;#34;AWS.</description></item></channel></rss>